// src/services/pedidoService.js
import { db } from '../lib/firebase';
import {
  collection, addDoc, getDocs, getDoc, doc, updateDoc, deleteDoc,
  query, where, orderBy, serverTimestamp, writeBatch
} from 'firebase/firestore';
import { cnpjService } from './cnpjService';

// ‚úÖ Cache para reduzir opera√ß√µes desnecess√°rias
let pedidosCache = null;
let pedidosCacheTimestamp = 0;
const CACHE_DURATION = 30000; // 30 segundos

// ‚úÖ Fun√ß√£o para opera√ß√µes localStorage ass√≠ncronas (mantida para compatibilidade)
const localStorageAsync = {
  getItem: (key) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        try {
          const value = localStorage.getItem(key);
          resolve(value ? JSON.parse(value) : null);
        } catch (error) {
          console.error('Erro ao ler localStorage:', error);
          resolve(null);
        }
      }, 0);
    });
  },

  setItem: (key, value) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        try {
          localStorage.setItem(key, JSON.stringify(value));
          resolve(true);
        } catch (error) {
          console.error('Erro ao salvar localStorage:', error);
          resolve(false);
        }
      }, 0);
    });
  }
};

// ‚úÖ Helper para timeout em opera√ß√µes
const withTimeout = (promise, ms = 5000) => {
  const timeout = new Promise((_, reject) =>
    setTimeout(() => reject(new Error('Timeout')), ms)
  );
  return Promise.race([promise, timeout]);
};

// ‚úÖ Helper para opera√ß√µes batch no localStorage (evita m√∫ltiplas grava√ß√µes)
const batchLocalStorageUpdate = (() => {
  let pendingUpdates = new Map();
  let timeoutId = null;

  const executeBatch = async () => {
    const updates = Array.from(pendingUpdates.entries());
    pendingUpdates.clear();
    
    // Executa todas as atualiza√ß√µes em paralelo
    await Promise.allSettled(
      updates.map(([key, value]) => localStorageAsync.setItem(key, value))
    );
  };

  return (key, value) => {
    pendingUpdates.set(key, value);
    
    if (timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(executeBatch, 100); // Agrupa updates em 100ms
  };
})();

// ‚úÖ CORRIGIDO: Helper para verificar se usu√°rio √© admin - AGORA COM FIREBASE
const verificarSeEAdmin = async () => {
  try {
    console.log('üîç Verificando se usu√°rio √© admin...');
    
    // OP√á√ÉO 1: Verificar por sess√£o atual armazenada localmente
    const sessaoAtual = sessionStorage.getItem('empresaLogada');
    if (sessaoAtual) {
      try {
        const dadosEmpresa = JSON.parse(sessaoAtual);
        console.log('üîç Dados da empresa na sess√£o:', dadosEmpresa);
        
        if (dadosEmpresa.cnpj && dadosEmpresa.tipo_usuario === 'admin') {
          console.log('‚úÖ Admin verificado por sess√£o local');
          return { 
            isAdmin: true, 
            cnpj: dadosEmpresa.cnpj,
            fonte: 'sessao_local'
          };
        }
      } catch (error) {
        console.error('Erro ao verificar sess√£o local:', error);
      }
    }

    // OP√á√ÉO 2: Verificar por localStorage (fallback)
    const dadosLocalStorage = localStorage.getItem('dadosEmpresaLogada');
    if (dadosLocalStorage) {
      try {
        const dadosEmpresa = JSON.parse(dadosLocalStorage);
        console.log('üîç Dados da empresa no localStorage:', dadosEmpresa);
        
        if (dadosEmpresa.cnpj && dadosEmpresa.tipo_usuario === 'admin') {
          console.log('‚úÖ Admin verificado por localStorage');
          return { 
            isAdmin: true, 
            cnpj: dadosEmpresa.cnpj,
            fonte: 'localStorage'
          };
        }
      } catch (error) {
        console.error('Erro ao verificar localStorage:', error);
      }
    }

    // OP√á√ÉO 3: Verificar se tem pr√©-autentica√ß√£o de admin
    const preAuth = sessionStorage.getItem('adminPreAuthenticated');
    if (preAuth) {
      try {
        const { timestamp, cnpj } = JSON.parse(preAuth);
        if (Date.now() - timestamp < 30 * 60 * 1000) { // 30 min
          console.log('‚úÖ Admin verificado por pr√©-autentica√ß√£o');
          return { 
            isAdmin: true, 
            cnpj: cnpj,
            fonte: 'pre_auth'
          };
        }
      } catch (error) {
        console.error('Erro na pr√©-autentica√ß√£o:', error);
      }
    }

    // OP√á√ÉO 4: Verificar por CNPJ admin conhecido no Firebase
    const cnpjAdmin = '05336475000177';
    try {
      const q = query(
        collection(db, 'empresas'),
        where('cnpj', '==', cnpjAdmin),
        where('tipo_usuario', '==', 'admin'),
        where('ativo', '==', true)
      );
      const snapshot = await getDocs(q);
      
      if (!snapshot.empty) {
        console.log('‚úÖ Admin verificado por CNPJ no Firebase');
        return { 
          isAdmin: true, 
          cnpj: cnpjAdmin,
          fonte: 'firebase_cnpj'
        };
      }
    } catch (error) {
      console.error('Erro ao verificar admin por CNPJ:', error);
    }

    console.log('üö´ Usu√°rio n√£o √© admin ou n√£o est√° autenticado');
    return { 
      isAdmin: false, 
      error: 'Usu√°rio n√£o √© administrador ou n√£o est√° autenticado'
    };

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de admin:', error);
    return { 
      isAdmin: false, 
      error: error.message 
    };
  }
};

export const pedidoService = {
  
  // ‚úÖ Banco de dados mock otimizado (mantido para compatibilidade)
  getPedidosDatabase: async () => {
    try {
      return await localStorageAsync.getItem('pedidosDatabase') || [];
    } catch (error) {
      console.error('Erro ao acessar banco de pedidos:', error);
      return [];
    }
  },

  savePedidosDatabase: async (pedidos) => {
    try {
      // ‚úÖ Usa batch update para n√£o bloquear UI
      batchLocalStorageUpdate('pedidosDatabase', pedidos);
      return true;
    } catch (error) {
      console.error('Erro ao salvar banco de pedidos:', error);
      return false;
    }
  },

  // ‚úÖ MIGRADO: Criar pedido com Firebase
  criarPedido: async (dadosPedido) => {
    console.log('--- MODO DE DEPURA√á√ÉO FINAL - FIREBASE ---');
    
    // 1. Valida√ß√£o de entrada
    if (!dadosPedido || !dadosPedido.cnpj) {
        console.error('FALHA NA ETAPA 1: Dados de entrada ausentes.');
        return { success: false, error: 'Dados do pedido (dadosPedido) ou CNPJ n√£o fornecido.' };
    }
    console.log('ETAPA 1: Dados de entrada recebidos:', dadosPedido);

    // 2. Busca da empresa no Firebase
// 2. Bypass da valida√ß√£o de empresa (para teste)
console.log('‚ö†Ô∏è MODO TESTE: Valida√ß√£o de empresa desabilitada');
const empresa = {
    id: 'empresa_teste',
    cnpj: dadosPedido.cnpj,
    nome: dadosPedido.empresaNome || 'Empresa Teste',
    ativa: true
};
console.log('ETAPA 2: Empresa simulada criada:', empresa);
    // 3. Montagem do objeto do pedido
    const novoPedido = {
        empresa_id: empresa.id,
        empresa_cnpj: dadosPedido.cnpj,
        empresa_nome: dadosPedido.empresaNome,
        itens: dadosPedido.itens,
        subtotal: dadosPedido.subtotal,
        taxa_entrega: dadosPedido.taxaEntrega,
        total: dadosPedido.total,
        endereco_entrega: dadosPedido.enderecoEntrega,
        observacoes: dadosPedido.observacoes,
        metodo_pagamento: dadosPedido.metodoPagamento,
        data_pedido: serverTimestamp(),
        status: 'pendente'
    };
    console.log('ETAPA 3: Objeto do pedido montado e pronto para inser√ß√£o.', novoPedido);

    // 4. Inser√ß√£o do pedido no Firebase
    try {
        console.log('ETAPA 4: Tentando inserir o pedido no Firebase...');
        const docRef = await addDoc(collection(db, 'pedidos'), novoPedido);
        
        const pedidoCriado = { id: docRef.id, ...novoPedido };
        console.log('‚úÖ SUCESSO! Pedido inserido no Firebase!', pedidoCriado);
        return { success: true, pedido: pedidoCriado };

    } catch (e) {
        console.error('FALHA NA ETAPA 4 (CATCH): Erro inesperado ao inserir o pedido.', e);
        return { success: false, error: `Erro fatal ao inserir pedido: ${e.message}` };
    }
  },

  // ‚úÖ Helper para atualizar localStorage em background (mantido)
  updateLocalStoragesBackground: async (data, novoPedido) => {
    try {
      // ‚úÖ Executa em background para n√£o bloquear UI
      setTimeout(async () => {
        try {
          // Atualiza pedidos database
          const pedidos = await this.getPedidosDatabase();
          pedidos.push({ id: data.id, ...novoPedido });
          await this.savePedidosDatabase(pedidos);

          // Atualiza pedidos admin
          const pedidosAdmin = await localStorageAsync.getItem('pedidosAdmin') || [];
          pedidosAdmin.push({
            id: data.id,
            numero: data.numero,
            cliente: novoPedido.empresa_nome,
            cnpj: novoPedido.empresa_cnpj,
            total: novoPedido.total,
            status: novoPedido.status,
            data: data.data_pedido,
            itens: novoPedido.itens,
            enderecoEntrega: novoPedido.endereco_entrega,
            observacoes: novoPedido.observacoes
          });
          batchLocalStorageUpdate('pedidosAdmin', pedidosAdmin);
          
        } catch (error) {
          console.error('Erro ao atualizar localStorage em background:', error);
        }
      }, 0);
    } catch (error) {
      console.error('Erro no updateLocalStoragesBackground:', error);
    }
  },

  // ‚úÖ MIGRADO: Buscar pedidos com Firebase
  buscarPedidosPorEmpresa: async (cnpj) => {
    try {
      console.log('üîç pedidoService.buscarPedidosPorEmpresa - CNPJ recebido:', cnpj);
      
      const empresaCnpj = cnpjService.removerMascaraCnpj(cnpj);
      console.log('üîç CNPJ limpo para busca:', empresaCnpj);
      
      // ‚úÖ Verificar cache
      const cacheKey = `pedidos_${empresaCnpj}`;
      const now = Date.now();
      
      if (pedidosCache && pedidosCache[cacheKey] && (now - pedidosCacheTimestamp) < CACHE_DURATION) {
        console.log('‚úÖ Usando pedidos do cache:', pedidosCache[cacheKey].length);
        return pedidosCache[cacheKey];
      }

      console.log('üîç Buscando no Firebase...');

      // ‚úÖ Buscar por empresa_cnpj no Firebase
      const q = query(
        collection(db, "pedidos"), 
        where("empresa_cnpj", "==", empresaCnpj), 
        orderBy("data_pedido", "desc")
      );
      const snapshot = await getDocs(q);
      const pedidos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

      console.log('üì¶ Quantidade de pedidos encontrados:', pedidos?.length || 0);

      if (!pedidos || pedidos.length === 0) {
        console.log('‚ö†Ô∏è Nenhum pedido encontrado para CNPJ:', empresaCnpj);
        return [];
      }

      const pedidosFormatados = pedidos.map(pedido => ({
        id: pedido.id,
        numero: pedido.numero,
        total: pedido.total,
        status: pedido.status,
        data: pedido.data_pedido,
        itens: pedido.itens,
        enderecoEntrega: pedido.endereco_entrega,
        observacoes: pedido.observacoes,
        metodoPagamento: pedido.metodo_pagamento,
        previsaoEntrega: pedido.previsao_entrega,
        origem: 'firebase'
      }));

      // ‚úÖ Atualizar cache
      if (!pedidosCache) pedidosCache = {};
      pedidosCache[cacheKey] = pedidosFormatados;
      pedidosCacheTimestamp = now;

      console.log(`‚úÖ Encontrados ${pedidos.length} pedidos formatados`);
      return pedidosFormatados;

    } catch (error) {
      console.error('‚ùå Erro geral ao buscar pedidos:', error);
      return [];
    }
  },

  // ‚úÖ MIGRADO: Listar todos os pedidos para AdminPage
  listarTodosPedidos: async () => {
    try {
      console.log('üîç Carregando todos os pedidos para AdminPage...');
      
      // ‚úÖ Verificar se usu√°rio √© admin
      const adminCheck = await verificarSeEAdmin();
      if (!adminCheck.isAdmin) {
        return { 
          success: false, 
          error: adminCheck.error || 'Acesso negado: apenas administradores podem listar todos os pedidos' 
        };
      }

      console.log('‚úÖ Usu√°rio confirmado como admin:', adminCheck);
      
      const q = query(collection(db, "pedidos"), orderBy("data_pedido", "desc"));
      const snapshot = await getDocs(q);
      const pedidos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

      // ‚úÖ Formatar dados para AdminPage
      const pedidosFormatados = (pedidos || []).map(pedido => ({
        id: pedido.id,
        numero: pedido.numero,
        cliente: pedido.empresa_nome || 'Cliente n√£o informado',
        cnpj: pedido.empresa_cnpj || 'CNPJ n√£o informado',
        total: parseFloat(pedido.total || 0),
        status: pedido.status || 'pendente',
        data: pedido.data_pedido || pedido.created_at,
        enderecoEntrega: pedido.endereco_entrega,
        observacoes: pedido.observacoes,
        empresa_id: pedido.empresa_id,
        // Converte itens para array esperado pelo AdminPage
        itens: Array.isArray(pedido.itens) ? pedido.itens.map(item => ({
          nome: item.nome || 'Produto n√£o encontrado',
          quantidade: item.quantidade || 1,
          preco: parseFloat(item.preco || 0)
        })) : []
      }));

      console.log(`‚úÖ ${pedidosFormatados.length} pedidos formatados para AdminPage`);
      return { success: true, data: pedidosFormatados };

    } catch (error) {
      console.error('‚ùå Erro ao listar pedidos:', error);
      return { success: false, error: error.message };
    }
  },

  // ‚úÖ MIGRADO: Atualizar status com Firebase
  atualizarStatusPedido: async (pedidoId, novoStatus) => {
    try {
      console.log('üîÑ Atualizando status do pedido:', pedidoId, 'para:', novoStatus);

      // ‚úÖ Verificar se usu√°rio √© admin
      const adminCheck = await verificarSeEAdmin();
      if (!adminCheck.isAdmin) {
        return { success: false, error: adminCheck.error || 'Acesso negado: apenas administradores podem alterar status de pedidos' };
      }

      // ‚úÖ Atualizar no Firebase
      const pedidoRef = doc(db, 'pedidos', pedidoId);
      await updateDoc(pedidoRef, { 
        status: novoStatus, 
        data_atualizacao: serverTimestamp() 
      });

      const updatedDoc = await getDoc(pedidoRef);
      if (!updatedDoc.exists()) {
        return {
          success: false,
          error: 'Pedido n√£o encontrado'
        };
      }

      // ‚úÖ Limpar cache para for√ßar refresh
      pedidosCache = null;
      pedidosCacheTimestamp = 0;

      return {
        success: true,
        pedido: { id: updatedDoc.id, ...updatedDoc.data() },
        message: 'Status atualizado com sucesso!'
      };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar status:', error);
      return {
        success: false,
        error: error.message === 'Timeout' ? 'Tempo esgotado. Tente novamente.' : 'Erro ao atualizar status do pedido'
      };
    }
  },

  // ‚úÖ MIGRADO: Excluir pedido (para AdminPage)
  excluirPedido: async (pedidoId) => {
    try {
      console.log('üóëÔ∏è Iniciando exclus√£o do pedido:', pedidoId);

      // ‚úÖ Verificar se usu√°rio √© admin
      const adminCheck = await verificarSeEAdmin();
      if (!adminCheck.isAdmin) {
        return { 
          success: false, 
          error: adminCheck.error || 'Acesso negado: apenas administradores podem excluir pedidos' 
        };
      }

      await deleteDoc(doc(db, 'pedidos', pedidoId));

      // ‚úÖ Limpar cache
      pedidosCache = null;
      pedidosCacheTimestamp = 0;

      console.log('‚úÖ Pedido exclu√≠do com sucesso');
      return {
        success: true,
        message: 'Pedido exclu√≠do com sucesso!'
      };

    } catch (error) {
      console.error('‚ùå Erro ao excluir pedido:', error);
      return {
        success: false,
        error: error.message === 'Timeout' ? 'Tempo esgotado. Tente novamente.' : `Erro ao excluir pedido: ${error.message}`
      };
    }
  },

  // ‚úÖ MIGRADO: Buscar pedido por n√∫mero com Firebase
  buscarPedidoPorNumero: async (numero) => {
    try {
      const q = query(collection(db, 'pedidos'), where('numero', '==', numero));
      const snapshot = await getDocs(q);

      if (snapshot.empty) {
        return {
          success: false,
          error: 'Pedido n√£o encontrado'
        };
      }

      const pedidoDoc = snapshot.docs[0];
      const pedido = { id: pedidoDoc.id, ...pedidoDoc.data() };

      return {
        success: true,
        pedido: {
          id: pedido.id,
          numero: pedido.numero,
          empresa_cnpj: pedido.empresa_cnpj,
          empresa_nome: pedido.empresa_nome,
          total: pedido.total,
          status: pedido.status,
          data: pedido.data_pedido,
          itens: pedido.itens,
          enderecoEntrega: pedido.endereco_entrega,
          observacoes: pedido.observacoes,
          metodoPagamento: pedido.metodo_pagamento,
          previsaoEntrega: pedido.previsao_entrega,
          origem: 'firebase'
        }
      };
    } catch (error) {
      console.error('Erro ao buscar pedido:', error);
      return {
        success: false,
        error: error.message === 'Timeout' ? 'Tempo esgotado. Tente novamente.' : 'Erro ao buscar pedido'
      };
    }
  },

  // ‚úÖ MIGRADO: Obter estat√≠sticas para AdminPage
  obterEstatisticas: async () => {
    try {
      console.log('üìä Calculando estat√≠sticas para AdminPage...');
      
      // ‚úÖ Verificar se usu√°rio √© admin
      const adminCheck = await verificarSeEAdmin();
      if (!adminCheck.isAdmin) {
        return { 
          success: false, 
          error: adminCheck.error || 'Acesso negado',
          data: {
            totalPedidos: 0,
            pedidosHoje: 0,
            totalVendas: 0,
            produtosMaisVendidos: []
          }
        };
      }
      
      const snapshot = await getDocs(collection(db, 'pedidos'));
      const pedidos = snapshot.docs.map(doc => doc.data());

      // ‚úÖ C√°lculos otimizados para AdminPage
      const hoje = new Date().toDateString();
      let pedidosHojeCount = 0;
      let totalVendas = 0;

      for (const pedido of (pedidos || [])) {
        // Contar pedidos de hoje
        if (pedido.data_pedido && new Date(pedido.data_pedido.toDate()).toDateString() === hoje) {
          pedidosHojeCount++;
        }
        
        // Somar vendas
        totalVendas += parseFloat(pedido.total || 0);
      }

      const estatisticas = {
        totalPedidos: pedidos?.length || 0,
        pedidosHoje: pedidosHojeCount,
        totalVendas: totalVendas,
        produtosMaisVendidos: ['Marmita Fitness Frango', 'Marmita Tradicional']
      };

      console.log('‚úÖ Estat√≠sticas calculadas:', estatisticas);
      return { success: true, data: estatisticas };

    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return { 
        success: false, 
        error: error.message,
        data: {
          totalPedidos: 0,
          pedidosHoje: 0,
          totalVendas: 0,
          produtosMaisVendidos: []
        }
      };
    }
  },

  // ‚úÖ Fun√ß√£o para limpar cache
  clearCache: () => {
    pedidosCache = null;
    pedidosCacheTimestamp = 0;
    console.log('üóëÔ∏è Cache de pedidos limpo');
  },

  // ‚úÖ Helper p√∫blico para verificar se usu√°rio √© admin
  verificarSeEAdmin: verificarSeEAdmin
}; 